openapi: 3.0.3
info:
  title: music-everywhere
  description: |-
    music-everywhere 프로젝트 API 문서입니다.
    
    프로젝트는 MSA 아키텍처로 개발되며, 모든 마이크로서비스의 API는 이 문서에서 보실 수 있습니다.
    
    정해진 개발 사항에 대해 문서화를 진행하며 기능 추가 시 마다 문서를 업데이트, GIT을 통해 코드와 함께 형상관리 할 예정입니다.
    
    프로젝트 링크:
    - [music-everywhere](https://github.com/f-lab-edu/music-everywhere)
  version: 1.0.0
servers:
  - url: /api/
tags:
  - name: users
    description: 회원가입, 사용자 조회 등 사용자의 동작과 인증을 담당합니다.
  - name: groups
    description: 그룹 자체를 관리합니다. 그룹의 생성, 삭제, 가입, 관리를 담당합니다.
  - name: posts
    description: 게시글과 관련된 동작을 담당합니다.
    


paths:
  /users:
    post:
      tags:
        - users
      summary: 회원가입
      description: 서비스에 가입합니다. 중복된 이메일은 사용할 수 없습니다.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email: 
                  type: string
                password:
                  type: string
                name:
                  type: string
                nickname:
                  type: string
      responses:
        '200':
          description: 회원가입 성공
        '409':
          description: 중복된 이메일
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    example: DuplicateElementException
                  msg:
                    type: string
                    example: '중복된 이메일입니다. email : test@email.com'
                    
  /users/check-email:
    get:
      tags:
        - users
      summary: 이메일 중복 검사
      description: 가입 전 이미 존재하는 이메일인지 확인합니다.
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 중복되지 않은 이메일
        '409':
          description: 중복된 이메일
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    example: DuplicateElementException
                  msg:
                    type: string
                    example: '중복된 이메일입니다. email : test@email.com'
          
  /users/{userId}:
    get:
      tags:
        - users
      summary: 사용자 조회
      description: 사용자 번호를 통해 사용자의 정보를 조회합니다.
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 사용자 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                  email:
                    type: string
                  name:
                    type: string
                  nickname:
                    type: string
        '404':
          description: 조회 실패, userId로 등록된 사용자가 없습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorType:
                    type: string
                    example: NoSuchElementException
                  msg:
                    type: string
                    example: '찾으려는 사용자가 없습니다. id : 1'
          
          
  /groups:
    post:
      tags:
        - groups
      summary: 그룹 생성
      description: 새로운 그룹을 생성합니다.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                groupName:
                  type: string
                  description: 그룹 이름
                groupDescription:
                  type: string
                  description: 그룹에 대한 설명
                groupScope:
                  type: string
                  description: 그룹 공개 범위
                  enum:
                    - PUBLIC
                    - PRIVATE
                joinCondition:
                  type: string
                  description: 그룹 가입 조건
                  enum:
                    - OPEN
                    - APPROVAL_REQUIRED
                nickname:
                  type: string
                  description: 그룹에서 사용할 프로필 이름
      responses:
        '200':
          description: 그룹 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: '테스트 그룹'
                  description:
                    type: string
                    example: '테스트를 위한 그룹입니다'
  
  /groups/{groupId}:
    post:
      tags:
        - groups
      summary: 그룹 가입
      description: 그룹에 가입합니다. 탈퇴했던 그룹이라면 프로필을 되살립니다.
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
                  description: 그룹에서 사용할 프로필 이름
                requestInfo:
                  type: string
                  description: 그룹 옵션이 수락 후 가입일 시 사용, 가입 요청에 대한 부가 정보 (사용자로부터 입력받음)
      responses:
        '200':
          description: 그룹 가입 성공
        '201':
          description: 기존 프로필을 복구
        '403':
          description: 가입이 금지된 사용자
        '404':
          description: 존재하지 않는 그룹
        '409':
          description: 이미 가입한 사용자
          
  /groups/{groupId}/requests:
    get:
      tags:
        - groups
      summary: 가입요청 목록 요청
      description: 가입 요청 목록을 반환합니다. status 파라미터 미전달 시 대기중인 요청만 반환됩니다.
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum:
              - PENDING
              - PROCESSED
              - ALL
            default: PENDING
            # description: 조회할 가입 요청의 상태 (PENDING: 대기중, PROCESSED: 처리됨, ALL: 모든 요청)
      responses:
        '200':
          description: 요청 목록 반환 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: 요청 ID
                    nickname:
                      type: string
                      description: 가입 요청 시 입력한 닉네임
                    requestInfo:
                      type: string
                      description: 사용자가 입력한 부가 정보
        '403':
          description: 권한 부족
        '404':
          description: 존재하지 않는 그룹
    
  /groups/{groupId}/requests/{requestId}:
    patch:
      tags:
        - groups
      summary: 가입 요청 처리
      description: 요청에 대해 수락/거절 처리를 진행합니다
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
        - in: path
          name: requestId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action: 
                  type: string
                  description: 요청 처리에 기대하는 동작
                  enum: 
                    - APPROVE
                    - REJECT
      responses:
        '200':
          description: 처리 성공
        '403':
          description: 권한 부족
        '404':
          description: 존재하지 않는 그룹 혹은 요청 정보
        '409':
          description: 이미 처리된 요청
          
  /groups/posts:
    get:
      tags:
        - posts
      summary: 전체 게시글 조회
      description: PUBLIC 상태의 전체 게시글을 조회합니다.
      parameters:
        - in: query
          name: cursorId
          required: false
          schema:
            type: integer
        - in: query
          name: size
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: 게시글 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 9999
                        title:
                          type: string
                          example: '게시글 제목'
                        content:
                          type: string
                          example: '게시글 내용'
                        groupId:
                          type: integer
                          example: 1
                        profileId:
                          type: integer
                          description: '작성자 프로필 ID'
                          example: 1
                        nickname:
                          type: string
                          example: 'testUser'
                        updatedDate:
                          type: string
                          format: date-time
                          example: '2024-07-10T16:51:37'
                  pageable:
                    type: object
                    properties:
                      pageNumber:
                        type: integer
                        example: 0
                      pageSize:
                        type: integer
                        example: 10
                      sort:
                        type: object
                        properties:
                          empty:
                            type: boolean
                            example: true
                          unsorted:
                            type: boolean
                            example: true
                          sorted:
                            type: boolean
                            example: false
                      offset:
                        type: integer
                        example: 0
                      paged:
                        type: boolean
                        example: true
                      unpaged:
                        type: boolean
                        example: false
                  size:
                    type: integer
                    example: 10
                  number:
                    type: integer
                    example: 0
                  sort:
                    type: object
                    properties:
                      empty:
                        type: boolean
                        example: true
                      unsorted:
                        type: boolean
                        example: true
                      sorted:
                        type: boolean
                        example: false
                  first:
                    type: boolean
                    example: true
                  last:
                    type: boolean
                    example: false
                  numberOfElements:
                    type: integer
                    example: 10
                  empty:
                    type: boolean
                    example: false
        '403':
          description: 권한 부족(가입하지 않은 그룹 등)
          
          
  /groups/{groupId}/posts:
    get:
      tags:
        - posts
      summary: 그룹에 포함된 게시글 조회
      description: 그룹 게시글을 조회합니다. 그룹 회원만 가능합니다.
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
        - in: query
          name: cursorId
          required: false
          schema:
            type: integer
        - in: query
          name: state
          required: false
          schema:
            type: string
            enum:
              - GENERAL
              - DELETED
              - RESTRICTED
            default: GENERAL
        - in: query
          name: size
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: 게시글 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 9999
                        title:
                          type: string
                          example: '게시글 제목'
                        content:
                          type: string
                          example: '게시글 내용'
                        groupId:
                          type: integer
                          example: 1
                        profileId:
                          type: integer
                          description: '작성자 프로필 ID'
                          example: 1
                        nickname:
                          type: string
                          example: 'testUser'
                        updatedDate:
                          type: string
                          format: date-time
                          example: '2024-07-10T16:51:37'
                  pageable:
                    type: object
                    properties:
                      pageNumber:
                        type: integer
                        example: 0
                      pageSize:
                        type: integer
                        example: 10
                      sort:
                        type: object
                        properties:
                          empty:
                            type: boolean
                            example: true
                          unsorted:
                            type: boolean
                            example: true
                          sorted:
                            type: boolean
                            example: false
                      offset:
                        type: integer
                        example: 0
                      paged:
                        type: boolean
                        example: true
                      unpaged:
                        type: boolean
                        example: false
                  size:
                    type: integer
                    example: 10
                  number:
                    type: integer
                    example: 0
                  sort:
                    type: object
                    properties:
                      empty:
                        type: boolean
                        example: true
                      unsorted:
                        type: boolean
                        example: true
                      sorted:
                        type: boolean
                        example: false
                  first:
                    type: boolean
                    example: true
                  last:
                    type: boolean
                    example: false
                  numberOfElements:
                    type: integer
                    example: 10
                  empty:
                    type: boolean
                    example: false
        '403':
          description: 권한 부족(가입하지 않은 그룹 등)

    post:
      tags:
        - posts
      summary: 게시글 생성
      description: 새로운 게시글을 생성합니다.
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: '게시글 제목'
                content:
                  type: string
                  description: '게시글 내용'
                scope:
                  type: string
                  enum:
                    - PUBLIC
                    - GROUP_ONLY
      responses:
        '200':
          description: 게시글 작성 성공
        '403':
          description: 권한 부족(가입하지 않은 그룹 등)
        
  /groups/{groupId}/posts/{postId}:
    parameters:
      - in: path
        name: groupId
        required: true
        schema:
          type: integer
      - in: path
        name: postId
        required: true
        schema:
          type: integer
    get:
      tags: 
        - posts
      summary: 단일 게시글 조회
      description: 게시글 ID를 통해 게시글을 조회합니다.
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  title:
                    type: string
                    example: '게시글 제목'
                  content:
                    type: string
                    example: '게시글 내용'
                  group_id:
                    type: integer
                    example: 1
                  profile_id:
                    type: integer
                    description: '작성자 프로필 ID'
                    example: 1
                  nickname:
                    type: string
                    example: '작성자 닉네임'
                  updated_date:
                    type: string
                    format: date-time
                    example: 2024-06-18T12:34:56
    
    delete:
      tags:
        - posts
      summary: 게시글 삭제
      description: 특정 ID의 게시글을 삭제합니다.
      responses:
        '200':
          description: 삭제 성공
        '403':
          description: 권한 부족
        '404':
          description: 존재하지 않는 게시글
  
